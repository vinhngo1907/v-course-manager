generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Supporter {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Admin {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Mod {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Account {
    id          String   @id @default(uuid())
    username    String   @unique @db.VarChar(20)
    password    String   @db.VarChar(200)
    isActivated Boolean  @default(true)
    user        User?
    userId      String?  @db.Uuid
    createdAt   DateTime @default(now())
    createdBy   String   @default("system")
    updatedAt   DateTime @updatedAt
    updatedBy   String   @default("system")
}

model User {
    id          String     @id @default(uuid())
    email       String     @unique @db.VarChar(255)
    fullName    String     @db.VarChar(255)
    roles       Role[]
    modId       String?
    mod         Mod?
    adminId     String?
    admin       Admin?
    supporterId String?
    supporter   Supporter?

    accountId          String              @unique
    account            Account             @relation(fields: [accountId], references: [id])
    courses            Course[]
    videos             Video[]
    UserLessonProgress UserLessonProgress?
}

model Role {
    id        String   @id @default(uuid())
    name      String   @unique @db.VarChar(200)
    users     User[]
    createdAt DateTime @default(now())
    createdBy String   @default("system")
    updatedAt DateTime @updatedAt
    updatedBy String   @default("system")
    isActive  Boolean  @default(true)
}

model Subtitle {
    id       String    @id @default(uuid())
    sublines Subline[]
    language String
    // videos   Video[]
    Video    Video?    @relation(fields: [videoId], references: [id])
    videoId  String?
}

model Subline {
    id         String    @id @default(uuid())
    content    String
    // subtitles Subtitle[]
    Subtitle   Subtitle? @relation(fields: [subtitleId], references: [id])
    subtitleId String?
    timestamp  DateTime  @default(now())
}

model Comment {
    id                String             @id @default(uuid())
    content           String
    commentReactions  CommentReactions[]
    commentReactionId String

    @@map("Comment")
}

model CommentReactions {
    id        String   @id @default(uuid())
    type      String
    Comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?

    @@map("Comment_Reaction")
}

model Course {
    id                 String               @id @default(uuid())
    title              String               @db.VarChar(300)
    description        String               @db.VarChar(300)
    thumbnail          String?              @db.VarChar(300)
    lessons            Lesson[]
    CourseRegistration CourseRegistration[]

    createdById String
    createdBy   User    @relation(fields: [createdById], references: [id])
    published   Boolean @default(false)

    completedLessons UserLessonProgress[]

    @@map("Course")
}

model Lesson {
    id             String               @id @default(uuid())
    name           String               @db.VarChar(300)
    description    String               @db.VarChar(300)
    course         Course               @relation(fields: [courseId], references: [id])
    courseId       String               @unique
    video          Video?
    usersCompleted UserLessonProgress[]
}

model Video {
    id          String     @id @default(uuid())
    title       String     @db.VarChar(300)
    description String     @db.VarChar(300)
    thumbnail   String?    @db.VarChar(300)
    videoUrl    String?    @db.VarChar(300)
    order       Int        @db.SmallInt
    subtitles   Subtitle[]
    lesson      Lesson?    @relation(fields: [lessonId], references: [id])
    lessonId    String?    @unique
    owner       User       @relation(fields: [ownerId], references: [id])
    ownerId     String

    publishAt   DateTime @default(now())
    duration    Float
    aspectRatio String?
    status      String   @default("preparing")
    posterTime  Float?

    @@map("Video")
}

model CourseRegistration {
    id           String   @id @default(uuid())
    userId       String
    courseId     String
    registeredAt DateTime @default(now())

    course Course @relation(fields: [courseId], references: [id])

    @@unique([userId, courseId])
    @@map("CourseRegistration")
}

model UserLessonProgress {
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @unique // relation scalar field (used in the `@relation` attribute above)
    lesson      Lesson   @relation(fields: [lessonId], references: [id])
    lessonId    String   @unique // relation scalar field (used in the `@relation` attribute above)
    completedAt DateTime @default(now())
    Course      Course?  @relation(fields: [courseId], references: [id])
    courseId    String?

    @@id([userId, lessonId])
}

// Define junction table for the many-to-many relationship
// model UserRoles {
//     userId String @unique
//     roleId String @unique

//     user User @relation(fields: [userId], references: [id])
//     role Role @relation(fields: [roleId], references: [id])

//     createdAt DateTime @default(now())
//     createdBy String   @default("system")
//     updatedAt DateTime @updatedAt
//     updatedBy String   @default("system")

//     @@id([userId, roleId])
// }
